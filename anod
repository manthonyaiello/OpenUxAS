#! /bin/bash
#
# Anod wrapper script.

# Script location
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Load global paths
source "${SCRIPT_DIR}/infrastructure/paths.sh"

# Activate the virtual environment
source "${VPYTHON_ACTIVATE}"

ANOD_SCRIPT="${INFRASTRUCTURE_DIR}/libexec/anod.py"


# Determine if we're being sourced (BASH, KSH, and ZSH compliant):
([[ -n $ZSH_EVAL_CONTEXT && $ZSH_EVAL_CONTEXT =~ :file$ ]] || 
 [[ -n $KSH_VERSION && $(cd "$(dirname -- "$0")" &&
    printf '%s' "${PWD%/}/")$(basename -- "$0") != "${.sh.file}" ]] || 
 [[ -n $BASH_VERSION ]] && (return 0 2>/dev/null)) && sourced=1 || sourced=0

# If we're not being sourced, then try to run the command the user requested.
if [ $sourced -eq 0 ]; then
    case $1 in
        reset)
            rm -rf "${SBX_DIR}"
            echo "Deleted \`${SBX_DIR}\`"
            ;;

        setenv)
            echo "anod is not installed as a shell function."
            echo "Try \`source ./anod\` and then run \`anod setenv $2\` again (without a leading \`./\`)."
            exit 1
            ;;

        *)
            python3 "${ANOD_SCRIPT}" $@
            ;;
    esac
else
    # If the user sources this file, install anod as a shell function
    function anod {
        case $1 in
            build)
                SHELL=/bin/bash python3 "${ANOD_SCRIPT}" build "${@:2}"
                ;;

            setenv)
                eval "$( python3 "${ANOD_SCRIPT}" printenv "${@:2}" )"
                ;;

            reset)
                rm -rf "${SBX_DIR}"
                echo "Deleted \`${SBX_DIR}\`"
                ;;
            
            *)
                python3 "${ANOD_SCRIPT}" $@
                ;;
        esac

        return 0
    }
fi
